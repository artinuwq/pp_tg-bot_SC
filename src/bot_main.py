from config import *
import telebot
import os
import pyautogui
from datetime import datetime
import threading
import time

bot = telebot.TeleBot(bot_token)
#{"task_id": 1, "notification_date": "2023-10-01 14:00", "status": "pending", "description": "Complete project report"}
#–°—Ç–∞—Ç—É—Å—ã –∑–∞–¥–∞—á:
#D - Done - –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ - ‚úÖ
#P - In Process - –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ - üîÑ
#F - Frozen - –∑–∞–º–æ—Ä–æ–∂–µ–Ω–∞ - ‚ùÑÔ∏è
#A - Archived - –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ - üì¶

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤
STATUS_DISPLAY = {
    'D': '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∞',
    'P': 'üîÑ –í –ø—Ä–æ—Ü–µ—Å—Å–µ',
    'F': '‚ùÑÔ∏è –ó–∞–º–æ—Ä–æ–∂–µ–Ω–∞',
    'A': 'üì¶ –í –∞—Ä—Ö–∏–≤–µ'
}
tasks = [
    {"task_id": 1, "notification_date": "2023-10-01 14:00", "status": "P", "description": "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞"},
]

@bot.message_handler(commands=['start'])
def Main(message):
    if str(message.from_user.id) != my_id:
        bot.send_message(message.chat.id, "–í–ª–∞–¥–µ–ª–µ—Ü –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω")
        print(message.from_user.id)
        return  # Ignore messages from non-owners
    
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    sleep_button = telebot.types.KeyboardButton("–°–ø—è—â–∏–π —Ä–µ–∂–∏–º")
    confirm_game_button = telebot.types.KeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–≥—Ä—É")
    add_task_button = telebot.types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")
    all_tasks_button = telebot.types.KeyboardButton("–í–µ—Å—å —Å–ø–∏—Å–æ–∫")
    markup.add(sleep_button, confirm_game_button)
    markup.add(add_task_button, all_tasks_button)
    
    bot.send_message(message.chat.id, f"–ü—Ä–∏–≤–µ—Ç {message.from_user.first_name}\n–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–æ–∫–∞, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:", reply_markup=markup)

@bot.message_handler()
def info(message):
    if str(message.from_user.id) != my_id:
        bot.send_message(message.chat.id, "–í–ª–∞–¥–µ–ª–µ—Ü –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω")
        return  # Ignore messages from non-owners
    
    if message.text == "–°–ø—è—â–∏–π —Ä–µ–∂–∏–º":
        bot.send_message(message.chat.id, "–ö–æ–º–ø—å—é—Ç–µ—Ä –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º, –±–æ—Ç –æ—Ç–∫–ª—é—á–µ–Ω")
        os.system("rundll32.exe powrprof.dll,SetSuspendState 0,1,0")

    elif message.text == "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–≥—Ä—É":
        bot.send_message(message.chat.id, "–ò–≥—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!")
        screen_width, screen_height = pyautogui.size()
        pyautogui.click(x=screen_width // 2, y=(screen_height // 2) - 40)

    elif message.text == "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É":
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n<–≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú>\n<–æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏>")
        def add_task_step(message):
            if str(message.from_user.id) != my_id:
                bot.send_message(message.chat.id, "–í–ª–∞–¥–µ–ª–µ—Ü –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω")
                return  # Ignore messages from non-owners
            try:
                lines = message.text.split("\n")
                if len(lines) != 2:
                    bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                    return

                notification_date = lines[0].strip()
                description = lines[1].strip()
                datetime.strptime(notification_date, "%d.%m.%Y %H:%M")
                new_task = {
                    "task_id": len(tasks) + 1,
                    "notification_date": notification_date,
                    "status": "P",
                    "description": description,
                }
                tasks.append(new_task)
                bot.send_message(message.chat.id, "–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
            except ValueError:
                bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            except Exception as e:
                bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

        bot.register_next_step_handler(message, add_task_step)



    elif message.text == "–í–µ—Å—å —Å–ø–∏—Å–æ–∫":
        bot.send_message(message.chat.id, "–ö–Ω–æ–ø–∫–∞ —Å–¥–æ—Ö–ª–∞ –∏–¥–∏ –Ω–∞—Ö—É–π")
        if not tasks:
            bot.send_message(message.chat.id, "–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç.")
        else:
            task_list = "–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:\n"
            for task in tasks:
                task_list += f"{task['notification_date']} - {STATUS_DISPLAY.get(task['status'], '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å')} - {task['description']}\n"
            bot.send_message(message.chat.id, task_list)

def task_notification():
    while True:
        now = datetime.now().strftime("%Y-%m-%d %H:%M")
        for task in tasks:
            if task["notification_date"] == now and task["status"] == "P":
                bot.send_message(my_id, f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–¥–∞—á–µ:\n{task['description']}")
        time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

notification_thread = threading.Thread(target=task_notification, daemon=True)
notification_thread.start()



bot.infinity_polling()